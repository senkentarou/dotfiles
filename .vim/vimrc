if has('vim_starting')
  set encoding=utf-8
  scriptencoding utf-8
endif

" define make directory function
function! s:mkdir(dir)
    if !isdirectory(a:dir)
        call mkdir(a:dir, "p")
    endif
endfunction

let s:vimdir = expand($HOME . '/.vim')
let s:vimrc = s:vimdir . '/vimrc'
let s:colors = s:vimdir . '/colors'
let s:undodir = s:vimdir . '/undo'
let s:info = s:vimdir . '/.viminfo'

" make color scheme dir
call s:mkdir(s:colors)
" make undo dir
call s:mkdir(s:undodir)

""" Tab settings (reference https://qiita.com/tekkoc/items/98adcadfa4bdc8b5a6ca)
command! -bar TabMoveNext :execute "tabmove " tabpagenr() % tabpagenr("$") + (tabpagenr("$") == tabpagenr() ? 0 : 1)
command! -bar TabMovePrev :execute "tabmove" (tabpagenr() + tabpagenr("$") - 2) % tabpagenr("$") + (tabpagenr() == 1 ? 1 : 0)
nnoremap <silent> <Space><Space> :<C-u>tabnew<CR>
nnoremap <Tab> gt
nnoremap <BS> gT
nnoremap <silent> <Right> :<C-u>TabMoveNext<CR>
nnoremap <silent> <Left> :<C-u>TabMovePrev<CR>
nnoremap <Up> ylkP<Esc>
nnoremap <Down> yljP<Esc>
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>

command! -nargs=1 MyLineSearch let @m=<q-args> | call search('^\s*'. @m)
command! -nargs=1 MyLineBackSearch let @m=<q-args> | call search('^\s*'. @m, 'b')
nnoremap mf :MyLineSearch<Space>
nnoremap mF :MyLineBackSearch<Space>

inoremap <silent> jj <Esc>

" general setting
set ruler
set showcmd
set history=1000
execute 'set viminfo+=n' . s:info
set undolevels=1000
set undofile
execute 'set undodir=' . s:undodir

" search setting
set incsearch
set ignorecase
set smartcase
set hlsearch

" editor setting
set number
set cursorline
set virtualedit=onemore
set scrolloff=5

" indent setting
set smartindent
set shiftwidth=2
set expandtab
set tabstop=2

" clipboard setting
set clipboard=unnamed,autoselect
set backspace=indent,start,eol
set whichwrap=b,s,h,l,<,>,[,]

" utility setting
set noerrorbells
set secure

" Reset Autocmd
augroup vimrc
    autocmd!
augroup END

" Clear-Background Autocmd
command! -nargs=*
    \ AutoCmd
    \ autocmd vimrc <args>

command! RmExSpace %s/\s\+$//ge
AutoCmd BufWritePre * :RmExSpace

" vim color scheme: hybrid (https://github.com/w0ng/vim-hybrid/colors/hybrid.vim)
let s:color_scheme = s:colors . '/hybrid.vim'
if filereadable(s:color_scheme)
    let g:hybrid_use_iTerm_colors = 1
    colorscheme hybrid
endif

syntax on
